# -*- coding: utf-8 -*-
"""pattern_rec_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sj6vlYtz-HioxnTac0o8BGCNfekHoD_r
"""

import pickle
import numpy as np
import os
from sklearn.kernel_ridge import KernelRidge 
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import scale
from sklearn.model_selection import LeaveOneOut

#returns new data with 
def getAverage(data, w):
  tmp = data[-w:,:]
  return np.mean(tmp, axis=0)
  

def getData(X, deltas):
  newX = np.zeros((X.shape[0], 4 * len(deltas)))
  for i in range(X.shape[0]):
    accumX = []
    for delta in deltas:
      avgX = getAverage(X[i,:], delta)
      accumX.append(avgX)
    
    accumX = np.array(accumX).flatten()
    newX[i,:] = accumX

  return newX
  

def runModelNew(deltas, raw_x, raw_y):
  X = getData(np.array(raw_x), deltas)
  Y = np.array(raw_y)

  X = scale(X)

  cv = LeaveOneOut()
  # enumerate splits
  y_true, y_pred = list(), list()

  for train_ix, test_ix in cv.split(X):
    # split data
    X_train, X_test = X[train_ix, :], X[test_ix, :]
    y_train, y_test = Y[train_ix], Y[test_ix]
    # fit model
    krr = KernelRidge(alpha=1.0, kernel='rbf')

    param_grid = [
      {'alpha': [0.1, 1.0, 10.0, 100.0, 10000.0, 1000000.0], 'gamma': [0.001, 0.01, 0.1, 1.0], 'kernel': ['rbf']},
    ]

    search_krr = GridSearchCV(krr, param_grid, cv=5)
    best_krr = search_krr.fit(X_train, y_train)

    yhat = best_krr.predict(X_test)
    y_true.append(y_test[0])
    y_pred.append(yhat[0])
  # calculate accuracy

  y_pred = np.array(y_pred)
  y_pred[y_pred < 0] = -1
  y_pred[y_pred >= 0] = 1
  acc = accuracy_score(y_true, y_pred)
  print('Accuracy: %.3f' % acc)


  return acc
# print(best_krr.predict(X_test))

from sklearn.model_selection import LeaveOneOut
from sklearn.metrics import accuracy_score


raw_x = []
raw_y = []
for filename in os.listdir('Data'):
  if (filename[-4:] == ".pkl"):
    data_test = pickle.load(open('Data/' + filename, 'rb'))
    # print(data_test.shape)
    raw_x.append(data_test[1])
    raw_y.append(data_test[0])

delta_list = [[2], [10], [20], [30], [40], [50], [60], [2,30,60]]

resDict = {}




for i,deltas in enumerate(delta_list):
  resDict[i] = runModel(deltas, raw_x, raw_y)


print(resDict)

